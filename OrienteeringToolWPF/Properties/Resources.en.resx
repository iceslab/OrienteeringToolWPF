<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckTimeFormat" xml:space="preserve">
    <value>Check time: {0}</value>
  </data>
  <data name="ChipNumberFormat" xml:space="preserve">
    <value>Chip number: {0}</value>
  </data>
  <data name="CompetitionCannotStart" xml:space="preserve">
    <value>Cannot start finished competition.</value>
  </data>
  <data name="CompetitionHasFinished" xml:space="preserve">
    <value>Competition has finished</value>
  </data>
  <data name="CompetitorBirthDate" xml:space="preserve">
    <value>Date of birth</value>
  </data>
  <data name="CompetitorChip" xml:space="preserve">
    <value>Chip</value>
  </data>
  <data name="CompetitorClass" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="CompetitorName" xml:space="preserve">
    <value>Name and surname</value>
  </data>
  <data name="CompetitorRelay" xml:space="preserve">
    <value>Relay</value>
  </data>
  <data name="ConnectionNeeddedInfo" xml:space="preserve">
    <value>To start or continue competition you need to be connected to SPORTident station.\nTry again?</value>
  </data>
  <data name="ConnectionNotConnected" xml:space="preserve">
    <value>Not connected to station</value>
  </data>
  <data name="CreateKCDatabase" xml:space="preserve">
    <value>--
-- Plik wygenerowany przez SQLiteStudio v3.0.7 dnia N lut 21 21:21:29 2016
--
-- Użyte kodowanie tekstu: windows-1250
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Tabela: TOURNAMENT
CREATE TABLE TOURNAMENT (ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, START_TIME DATETIME NOT NULL, STARTED_AT_TIME DATETIME, FINISHED_AT_TIME DATETIME, NAME VARCHAR (255) NOT NULL, COURSE_TYPE INTEGER NOT NULL, DESCRIPTION TEXT);

-- Tabela: PROJECT_INFO
CREATE TABLE [PROJECT_INFO] (

[ID] INTEGER  NOT NULL PRIMARY KEY AUTOINCREMENT,

[TOURNAMENT_TYPE] INTEGER  NOT NULL

);

-- Tabela: RELAYS
CREATE TABLE [RELAYS] (

[ID] INTEGER  PRIMARY KEY AUTOINCREMENT NOT NULL,

[NAME] VARCHAR(255)  UNIQUE NOT NULL

);

-- Tabela: ROUTES
CREATE TABLE ROUTES (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, NAME TEXT UNIQUE NOT NULL);

-- Tabela: COMPETITORS
CREATE TABLE COMPETITORS (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, NAME VARCHAR (128) NOT NULL, CHIP INTEGER UNIQUE NOT NULL, RELAY_ID INTEGER NOT NULL REFERENCES RELAYS (ID) ON DELETE CASCADE, CLASS INTEGER NOT NULL, GENDER INTEGER NOT NULL, BIRTH_DATE DATE NOT NULL);

-- Tabela: RESULTS
CREATE TABLE RESULTS (CHIP INTEGER PRIMARY KEY NOT NULL REFERENCES COMPETITORS (CHIP) ON DELETE CASCADE, START_TIME TIMESTAMP NOT NULL, CHECK_TIME TIMESTAMP NOT NULL, FINISH_TIME TIMESTAMP NOT NULL);

-- Tabela: ROUTE_STEPS
CREATE TABLE ROUTE_STEPS (ID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, "ORDER" INTEGER NOT NULL, CODE INTEGER NOT NULL, ROUTE_ID INTEGER REFERENCES ROUTES (ID) ON DELETE CASCADE NOT NULL);

-- Tabela: PUNCHES
CREATE TABLE PUNCHES (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, CHIP INTEGER NOT NULL REFERENCES COMPETITORS (CHIP) ON DELETE CASCADE, CODE INTEGER NOT NULL, TIMESTAMP TIMESTAMP NOT NULL);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;</value>
  </data>
  <data name="DatabaseCascadeDeleteWarning" xml:space="preserve">
    <value>Caution!\nAll constrained data will be deleted.</value>
  </data>
  <data name="DatabaseDialogFilters" xml:space="preserve">
    <value>SQLite3 database|*.sqlite;*.db|All files (*.*)|*.*</value>
  </data>
  <data name="DatabaseOverwriteWarning" xml:space="preserve">
    <value>Caution!\nDatabase exists, do you want to overwrite?</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errors:</value>
  </data>
  <data name="FinishTimeFormat" xml:space="preserve">
    <value>Finish time: {0}</value>
  </data>
  <data name="InvalidClassError" xml:space="preserve">
    <value>Selected class is invalid</value>
  </data>
  <data name="InvalidCourseTypeError" xml:space="preserve">
    <value>Selected course type is invalid</value>
  </data>
  <data name="InvalidDataTitle" xml:space="preserve">
    <value>Invalid data given</value>
  </data>
  <data name="InvalidDateError" xml:space="preserve">
    <value>Entered date is invalid</value>
  </data>
  <data name="InvalidOrderError" xml:space="preserve">
    <value>Selected order is invalid</value>
  </data>
  <data name="InvalidRelayError" xml:space="preserve">
    <value>Selected relay is invalid</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NotANumberError" xml:space="preserve">
    <value>Value is not a number</value>
  </data>
  <data name="NullOrEmptyError" xml:space="preserve">
    <value>Field is empty or contains only whitespaces</value>
  </data>
  <data name="OriginalMessage" xml:space="preserve">
    <value>Orignal message:</value>
  </data>
  <data name="PunchChip" xml:space="preserve">
    <value>Chip</value>
  </data>
  <data name="PunchCode" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="PunchTimestamp" xml:space="preserve">
    <value>Punch time</value>
  </data>
  <data name="RelayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ResultCheckTime" xml:space="preserve">
    <value>Check time</value>
  </data>
  <data name="ResultChip" xml:space="preserve">
    <value>Chip</value>
  </data>
  <data name="ResultFinishTime" xml:space="preserve">
    <value>Finish time</value>
  </data>
  <data name="ResultStartTime" xml:space="preserve">
    <value>Start time</value>
  </data>
  <data name="RouteName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="RouteStepCode" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="RouteStepOrder" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="SiHandlerError" xml:space="preserve">
    <value>SPORTident station error</value>
  </data>
  <data name="StartTimeFormat" xml:space="preserve">
    <value>Start time: {0}</value>
  </data>
  <data name="StartTimeNotPassedWarning" xml:space="preserve">
    <value>Start time has not passed.\nStart anyway?</value>
  </data>
  <data name="TournamentCourseType" xml:space="preserve">
    <value>Course type</value>
  </data>
  <data name="TournamentName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="TournamentStartTime" xml:space="preserve">
    <value>Start time</value>
  </data>
  <data name="ValueAlreadyExistsError" xml:space="preserve">
    <value>Value already exists</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
</root>